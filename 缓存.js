// 缓存有如下优点：
// 减少冗余的数据传输，带宽瓶颈（本地的带宽LAN比远程的带宽要宽），瞬间拥塞（高并发,避免服务器过载），距离延时
// 请求缓存，已有副本，则为 '缓存命中'。没有，则称为 '缓存未命中'。
// '再验证命中'，检测副本新鲜度（若时间过长），即客户端发送一个小的再验证请求，内容没变化，返回 304，若服务器上的修改了，则为 '再验证未命中' 由服务器响应内容
// '对象被删除'，若服务器对象被删除，则返回404，缓存也将该对象删除。
// 验证的方式即 在请求的首部加上 if-modified-since
// 缓存命中率，即每次请求命中的概率。 字节命中率，即缓存提供的字节在 所有传输字节 中所占的比例。
// 区分命中，未命中。即区分是缓存中来的，还是服务器中来的。有些 代理 可能会在 via 首部附件信息。而 客户端 则可将 响应中的 Date 首部和当前时间进行比较，或是 Age 首部
// 缓存又分为：私有缓存，公有缓存（代理缓存）。 浏览器都有内建的私有缓存，将文档缓存在电脑内存和磁盘中。
// 代理缓存的层次结构：即实现层次化的缓存，离客户端近的代理未命中，则由下一层代理来命中缓存
// 网状缓存： 动态选择缓存，及其他缓存对缓存部分内容的访问。 兄弟缓存，即允许不同的组织链接起来，互为对等实体。实现共享缓存
// 缓存的 处理步骤： 接受，解析，查询，新鲜度检测（不新鲜，从服务器读取；新鲜，更新新鲜度），创建响应，发送，日志（内容提供商利用缓存，同时由于缓存会隐藏真实的访问次数，从而他们不能利用广告赚钱啦~，或者使用 cache-control，或者使用 （缓存）的命中日志）

// 缓存新鲜度的检测：
// 服务器再验证：检测是否过期，未过期，读缓存，过期，进入条件方法验证，检测是否修改。
// 文档过期：即向 响应首部添加 cache-control（使用相对时间） 和 expires（使用绝对时间） 首部。 设置每个文档的过期时间。一旦过了 过期时间，则缓存需要和服务器核对是否修改了内容。
// cache-control 是HTTP/1.1 里的。  cache-control: max-age=48200 (秒)    expires: Fri, 05 Jul 2002, 05:00:00 GMT

// 条件方法再验证：检测是否修改
// 条件请求首部，即缓存发送 再验证请求 时， 请求头部包含的 首部： If-Modified-Since：date     If-None-Match：tags
// 则请求时，在指定日期后，服务器的文档被改了，则返回新首部，新文档。 若未修改，则返回 304 
// 附加到文档的 一个实体标签，ETag， 当对文档进行修改的时候，同时修改实体标签来说明这是一个新的版本，此时请求时，缓存中文档的标签 和 服务器中文档的标签会有一个匹配
// 请求首部时 if-None-Match:"v2.6"     响应首部 ETag:'v2.6' 
// 客户端检测是否修改采用 实体标签 ETag  if-modified-since   服务器返回 last-modified  ETag
// 服务器返回 last-modified  则客户端使用 if-modified-since；  服务器返回  ETag， 则客户端需要使用ETag； 服务器返回两者，则客户端需要使用这两者验证方案。

// 控制缓存的方式：
// no-cache:  不是不缓存的意思，已经缓存在本地了，只是提供给用户前必须和服务器器进行 再验证，以确保是 最新的资源，而不是 过期的资源。
// 若不希望缓存带有 Cookie的文档，则 Cache-Control:no-cache="Set-Cookie"  或 为可缓存的文档使用 Cache-Control: public
// no-store： 这才是不进行缓存, 禁止缓存对响应进行复制
// max-age： 指定文档处于新鲜状态的秒数  max-age=0 即不缓存文档      s-maxage 仅适用于公有缓存
// must-revalidate：告诉浏览器、缓存服务器，本地副本过期前，可以使用本地副本；本地副本一旦过期，必须去源服务器进行有效性校验，
//  它得和有指定过期时间的  字段配合使用 例如 max-age=200  must-revalidate
// public 响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存
// private 表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）
// 客户端缓存 Cache-control 的配置： 强化缓存： min-fresh=200  max-age; 放松缓存：max-stale;  ....
// 如何设置缓存控制： 配置 Apache 模块，，，nodeJS
// 缓存的 详细算发？？？
// 
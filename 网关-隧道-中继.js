// Web 上所有资源都可以使用 HTTP 协议。
// 网关：
// 要在 web上发布 更复杂资源需求时，单个应用程序 无法处理所有资源。
// 开发者提出了 网关 的概念， 它是资源和应用程序之间的 粘合剂，而且可以转换 HTTP 为其他协议。其他协议完成资源获取后，会将资源对象放在 HTTP响应回送给客户端。
// 网关一侧是客户端，另一侧是服务器端。  HTTP/FTP网关
// 根据对话是在那一侧进行的：分为 客户端网关，服务器端网关。
// 客户端网关：  通过 其他协议 和客户端对话，通过HTTP协议和服务器通信
// 服务器端网关：通过HTTP协议与客户端对话，通过 其他协议 和服务器端通信

// 服务器端web网关；
// 转换客户端 HTTP协议 为其他协议。其他协议完成资源获取后，会将资源对象放在 HTTP响应回送给客户端。

// 服务器端安全网关；  网关加密用户的请求消息，再发送给服务器端
// 客户端安全加速网关：网关解密客户端发送的 HTTPS 流量,
// 资源网关（作为Web服务器和应用程序之间通信的方式使用）：即  客户端请求 -> 应用程序网关（CGI） -> 运行在服务器上的应用程序 -> 应用程序服务器
// CGI (common gateway interface) 应用程序是独立于服务器的。 通常是用 Perl、PHP、Ruby 和 C 等编程语言编写而成。
// 应用程序服务器 处理动态资源， Web服务器 处理静态资源
// 大多数服务器都会为开发者提供 一个/多个扩展 API
// 针对 应用程序之间能进行数据的交换，因此 'Web服务'，即是应用程序之间相互通信的标准和协议。
// CGI，由于每次接到请求，程序都要跟着启动一次。因此一旦访问量过大，Web 服务器要承担相当大的负载。
// 而 Servlet 运行在与 Web 服务器相同的进程中，因此受到的负载较小   Servlet 的运行环境叫做 Web 容器或 Servlet 容器。

// 隧道： Web 隧道允许通过HTTP 链接 发送非HTTP 流量。这样就在 HTTP 上捎带 其他协议 数据了。。 SSL 流量通过HTTP 链接隧道化传输出去 。。。
// Web 隧道 是 通过 CONNECT 方法建立起来的， CONNECT 主机名：端口号 版本信息，，和 GET 的等其他HTTP 方法的起使行不同。
// 此外，返回的消息短语是 connection Established 不是 ok，并且 没有content-Type 首部，
// 一旦隧道建立起来，数据就可以在任意时间内流向任意方向了

// 中继：实现基本的代理功能，并对流量进行盲转发，而不执行任何首部和方法。然而 盲中继，不支持 connection 首部，导致不处理第二条请求，使得浏览器处于挂起状态

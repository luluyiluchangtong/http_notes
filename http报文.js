// 如果说 http 是因特网的信使，那么 报文 就是它用来搬东西的包裹了
// HTTP报文 是在 http应用程序 之间发送的 数据块。
// 使用 流入inbound， 流出outbound, 上游upstream, 下游downstream，来描述 报文在 服务器 客户端，代理之间流动的方向。
// 报文的发送者都是在接收者的上游。
// 报文包含三个部分： 起使行， 首部， 实体（实体首部，实体主体）
// 请求报文的起使行说明了 要做什么 (请求方法，请求的 url地址, http版本号)。 响应报文的起使行说明了 发生了什么（http版本号，数字状态码，可读状态码/原因短语(ok) ）
// 注意： 版本号不是按小数来定大小的，而是数字， http2.22 版本号大于 http2.3 ！！！
// 报文又分为：请求报文，响应报文  其中：
// 方法：即客户端希望服务端对资源执行的动作；
//    http所有请求方法：各种方法的区别只是语义上的，
//    GET,  从服务器获取一份文档
//    POST, 向服务器 '发送' 需要处理的数据，由服务器将数据发送到 网关程序，然后由这个程序对其进行处理。
//    HEAD, 返回请求资源的 '首部信息' ，使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源.
//    OPTIONS, 用于获取 服务器 所支持的方法, 返回的响应报文中包含一个 Allow 首部字段，该字段的值表明了服务器支持的所有 HTTP 方法
//    PUT,  将请求的主体部分的数据 '存储' 在服务器上，若请求的 ur文档 在服务器已存在，则覆盖。若不存在，则服务器创建一个该文档
//    DELETE, 从服务器上删除一份文档
//    TRACE, 追踪 经过 代理服务器 上传到 服务器的报文，用以查看报文是否以及如何被毁坏或修改过。。
//    CONNECT,
//    PATCH, 用于对资源进行部分修改
//    GET POST PUT DELETE  查 改 增 删
// 其中 安全的方法 只有 HEAD  GET，

// 请求URL： 即对所有请求资源的命名。
// http 状态返回码 --- 100~199 已经收到消息/建立连接；200~299 正常返回信息；300~399 资源被移走，请求需要重定向；400~499 客户端请求错误；500~599 服务器端错误 .。。
// 当前的 http版本只为每一类定义了 ‘几个状态码’，，所以遇到不认识的，就将其归到对应的类别中就是了。
// 常用状态码： 200 请求成功并获取内容，
//             204 请求成功，但在返回的响应报文中不含实体的主体部分

//             301 资源的 url 已永久更新，若客户端已存书签，需客户端更新书签引用
//             302 资源的 url 临时更新，
//             303 资源的 url 临时更新，期望 客户端 以 GET 方法 临时重定向到另一个 url 上去。
//             304 从缓存中读取资源，根据请求头  if-Match   if-Modified-since 返回的响应信息。若内容没有修改，则返回 304，没有主体返回。
//                   301 永久  302 303 临时  304 缓存

//             400 客户端请求的语法错误，服务器无法理解
//             401 客户端需进行认证，
//             403 客户端访问该资源时被服务器拒绝，可对访问原因进行描述
//             404 未找到页面，

//             500 服务器内部错误，无法完成请求
//             503 服务器暂时处于 '超负载' 或正在进行 '停机维护' ，现在无法处理请求

//             200 204    301 302 303 304    400 401 403 404    500 503
// 切记！！  不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种情况也经常遇到

// 什么时候使用 重定向： 网站目录结构调整，网址改变，网页扩展名改变，等。。
// 重定向的用处：       用户再次访问，会得到一个404页面，让访问流量白白流失，其次，当注册了多个域名的网站，通过重定向让访问这些域名的用户自动跳转到主站点等
// 302 会存在 网址劫持

// 首部：通用首部，请求首部，响应首部，实体首部（用来描述 主体 的），扩展首部

// 重定向时： 查看 本地资源副本 与 源端服务器上的资源进行对比，查看资源是否是最新的，可在客户带请求时添加 if-Modified-Since 首部字段。 读取服务器端最新修改过的内容
// 对于重定向的请求，响应时最好包含一个实体，并描述 重定向 url 的链接

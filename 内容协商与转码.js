// 内容协商 即客户端请求选择最合适变体的过程~~

// 1. 客户端驱动的协商，
// 即 客户端请求时，服务器发回响应列出可用页面，让客户端选择。两种方式：
// 服务器返回一个页面，页面上有各个版本的连接供和用户选择； 服务器返回 300 并在客户端弹出对话框，让用户选择。
// 这种方式除了增加时延并对每个页面进行多次繁琐的请求，还需要多个 URL，（一个公共的，一个特定的）不利于用户访问。

// 2. 服务器驱动的协商
// 即 客户端发送有关客户偏好的足够信息，服务端根据客户端的 首部集 做出准确的判断
// 客户端： Accept         Accept-Language    Accept-Charset   Accept-Encoding;  
// 服务端： Content-Type   Content-Language   Content-Type     Content-Encoding
// Accept-Language: en; q=1.0, zh-CN; 0.5  优先值。。
// 其他首部集， User-Agent
// 服务器 响应中的 vary 首部告诉 缓存服务器 根据哪些首部来决定发送响应的最佳版本。

// Apache服务器内容协商具体方式：
// 配置文件设置后缀，为网站中的每个有变体的 URI 创建一个 type-map.var 文件，
// 启用 MultiView， 当浏览器请求时，服务器自动查找并 创建 type-map.var 文件。

// 3. 透明协商（缓存代理） 是服务器驱动和客户端驱动的结合体，是由服务器端 和 客户端各自进行内容协商的一种方法
// 缓存转发 URI， 并缓存响应， 当请求到达时，缓存根据 内容协商首部集 来寻找最佳匹配。同时检查 vary 首部（服务器发送的特定请求首部）
// 然后根据 缓存变体 的 请求首部 和 响应首部 来判断应回送的响应

// 转码：
// 即服务端 没有 客户端所需要的 文档， 服务端可以把现存的文档 转换成 客户端可用的文档。
// 3 种类别的转码：
// 格式转换： HTML=>WML   注：内容转换/转码 与 内容编码/传输编码 不同。 前者是为了能看到，后者是为了高效/安全的传输
// 信息综合： 即提取文档中关键的信息片段。 例如，生成文档目录，删除商标，广告。
// 内容注入： 为每个页面动态添加广告。。
// 一般由代理缓存对文档进行转码，以减少服务器的计算。

// 压缩传输的内容编码
// 分块传输编码
// 重定向： 即一种有助于找到 ‘最佳’ 分布式内容的技术。
// 重定向和负载均衡是共存的。即重定向的同时也包含了负载均衡，反之亦然~
// 从客户端发送请求到目标， 目标对其进行处理的角度来看， 服务器，代理，缓存，网关对客户端来说都是服务器！！！
// web服务器会根据每个 IP 来处理请求，将请求分摊到 复制的服务器上去，从而选择靠近客户端最近的，负载最轻的服务器返回响应

// 路由器 就像是出租车，上车后司机司机需要知道你的目的地（IP 地址），然后司机来负责选择线路到达目的地。到达目的地的线路可能根据实际的交通情况有所变化。
// 交换机 就像地铁，从A到B的线路是固定的，只要你选择了到达地址（MAC),你就只能乘坐某条固定的线路，地铁司机也不会司机也不问你去哪里。
// MAC地址（英语：Media Access Control Address），直译为媒体访问控制地址，也称为局域网地址（LAN Address），以太网地址（Ethernet Address）或物理地址（Physical Address）
// OSI模型（OSI model） 1.物理层   2.数据连接层 3.网络层  4.传输层   5.会话层  6.表达层   7.应用层
// TCP/IP 模型 1.物理层     2. 链接层（以太网  MAC地址） 3.网络层（IP协议 二进制数据） 4.传输层（TCP协议 文本数据）    5.应用层（HTTP协议）

// 通用的重定向方法：
// HTTP 重定向， 即 web服务器收到请求后，将 短的重定向报文 发回给客户端，客户端再次发送请求寻找 最佳 可用服务器。
// 所以 HTTP 重定向需要处理大量的判断 重定向到那个服务器

// DNS 重定向
// DNS 允许几个 IP 地址关联到一个域中，即一个域名可以解析成 几个 IP 地址，
// DNS 轮转（只是单纯的将同一请求分发到不同的服务器），即DNS 在地址查询完后，对 IP地址进行轮转，每次查找并使用的地址都依次放在轮转列表的最后，故对于大量相同的请求来说，可以将负载合理的分散到各个服务器上去
// 因为 DNS对地址查找的结果会被记住，使得 浏览器，操作系统都会重用这些地址，进行重复的地址查找。对客户端 的负载来说是一个多余的负载，即客户端链接到一台服务器需要很长的时间
// 增强的 DNS 重定向算法：
// 负载均衡算法，即将负载最轻的服务器放到最前面，即轮询后将它的 IP 地址放到地址列表的前面
// 邻接路由算发，即将请求发送到离客户端最近的服务器，
// 故障屏蔽算发，即将请求绕开出故障，服务中断的地方。
// 通常运行这些算法的就是权威 DNS服务器，由权威 DNS服务器监视着众多服务器，并返回 IP地址给本地 DNS服务器，然后提供给客户端进行链接。

// 传播寻址
// 即几台服务器都有相同的 IP 地址，每台服务器都将自己的地址 广告给相应的路由， 路由将请求转发到 广告这个地址最近的服务器上去。分布式任播是一项新技术。

// IP MAC 转发

// IP 地址转发

// 代理域缓存重定向技术
// 显示浏览器配置

// 代理自动配置

// 代理自动发现协议

// Web缓存协调协议

// 因特网缓存协议

// 缓存分组路由协议

// 超文本缓存协议

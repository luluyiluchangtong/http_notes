// HTTP 通信时，除客户端和服务器以外，还有一些用于 通信数据转发 的 '应用程序'，例如代理、网关和隧道。它们可以配合服务器工作。
// 代理 是一种有 转发功能 的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端
// 每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息   HTTP:1.1 200 ok  Via:proxy1    Via(渠道，通过)
// 透明代理（Transparent Proxy）不对报文进行加工的代理， 相对的是 非透明代理

// 网关 是转发 其他服务器 通信数据的 服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。
// 隧道 是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。隧道的目的是确保客户端能与服务器进行安全的通信

// HTTP 的代理服务器即是 Web服务器，又是Web客户端。 分为 私有代理， 公共代理。
// 代理 和 网关的区别：前者是连接两个或多个使用 相同协议 的应用程序，后者是连接两个或多个使用 不同协议 的端点，有着 协议转器 的角色。

// 使用代理可以：
// 改善安全性 ---代理服务器的下列用途：
// 儿童过滤器，
// 文档访问限制，（即限制访问内容，或需要相关权限密令才能访问），安全防火墙，
// 提高性能 ---代理服务器的下列用途： 
// Web 缓存， 缓存 是指 代理服务器 或 客户端本地磁盘 内保存的资源副本
// 反向代理（代理服务器端，使得真实服务器端对客户不可见，正向代理刚好相反。），又被称为服务器加速器。
// 内容路由器， 根据网络流量状况和内容类型将请求导向特定的 Web服务器，实现各种服务级的请求。如付费获取高性能网络服务时，可从附近的缓存中获取内容。
// 转码器， 即可修改内容的主体格式，例如。传输的 gif 转为 JPEG，压缩图片/文本，降低色彩饱和度，转换语言
// 匿名代理，即主动从报文中删除身份特性。

// 代理服务器的部署：
// 出口代理，放在本地网络的出口节点； 访问/入口代理：放在ISP（互联网服务提供商）访问节点上；反向代理：部署在网络边缘； 网络交换代理：放在网络之间的因特网对等交换点上。

// 代理的层级结构：靠近服务器的代理为父代理（入口），靠近客户端的代理为子代理（出口）。有静态代理，动态代理
// 静态代理，一级一级的传递。
// 动态代理, 根据请求的对象，将代理转发给特定的父代理（例如，付费内容（缓存服务器），特定类型的图片（压缩代理服务器）），除此还有
// 负载均衡，地理位置附近的路由； 类型路由（根据URL的不同转发到不同的父代理和服务器上去）； 基于订购的路由

// 代理如何获取流量，（即将如何将客户端流量导向代理）
// 修改客户端，即为客户端配置使用代理服务器； 
// 修改网络，即通过狡猾设备/路由设备将流量导向一个代理； 
// 修改 DNS的命名空间， 即使用反向代理
// 修改Web服务器，修改服务器配置，将客户端重定向到一个代理上去

// 客户端的代理设置：
// 手工配置，即设置选项里来 手工指定代理的主机和端口
// 动态代理：PAC文件，配置和手工配置类似，即在设置中提供一个可获取 PAC 文件的 URL 地址， PAC 是一个 js程序，访问每个文档时，js函数都会选择恰当的代理服务器。
// WPAD协议，自动为浏览器查找合适的 PAC 文件。

// 代理报文和服务器的报文的 URL 不同，前者请求行中是完整的 URL， 后者请求行中是部分的 URL
// 在设置客户端使用代理时，则发送 完全的 URL， 没有设置客户端代理时，则发送部分 URL
// 虚拟主机web服务器需要知道 web站点的主机名，即需要使用 Host 首部 来承载主机和端口信息。
// 反向代理 和 拦截代理都只会收到部分的 URL，需要配置真实服务器的 IP地址和端口号。
// 转发的过程中对 URL 的修改会带来一些操性问题，需谨慎、
// 没有显示代理时，浏览器会尝试对输入的主机名进行自动扩展和解析。 有显示代理时，则没有词便捷功能
// 有拦截代理时 URL 的解析，？？？？

// 追踪报文：
// via 首部字段列出了与报文途径的每个中间节点（代理服务器/网关）有关的信息。
// via = 1.1 ......,  1.1 .........
// via 的语法： 协议名（HTTP可选，非HTTP，必填），协议版本，节点名（中间节点的主机和可选端口号），可选节点注释（厂商/版本信息）
// 请求和响应报文中都必须要有 via首部， 响应的报文 via首部总是和请求报文首部相反。
// 有些代理为使用 非HTTP协议的服务器 提供了 网关功能，via 同时也记录了这些协议转换信息。。
// via 字符串中不使用确切的 主机名，则可以使用假命来代替那台主机的名字，但是同时也要为每台服务器保留一个 via路标条目。
// TRACE 方法会跟踪经代理链传输的 '请求报文'， TRACE 对 代理流 的调试非常有用。
// 可以使用 Max-Forward（最大转发次数） 首部字段来限制 TRACE 所经过的代理跳数。 这在测试 代理链 是否 是在 无限循环中 转发报文，或者查看代理连中特定服务器的效果时很有用。
// 代理认证。即代理作为访问控制设备使用，对于受限内容的访问，代理服务器会返回 407 和 Proxy-Authenticate 首部字段。 
// 除非客户端提供有效证书，代理才会将 原始请求 向下传输。
// 代理对不认识的首部，和不支持的方法都要进行转发。
// 通过使用 OPTIONS 方法， 代理可以在与服务器进行交互前，确定服务器的能力。 HTTP/1.1 中响应唯一指定的首部字段是 Allow 首部，  Allow: GET,HEAD,PUT


// 跨域：